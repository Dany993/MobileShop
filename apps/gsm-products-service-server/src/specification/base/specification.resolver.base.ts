/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Specification } from "./Specification";
import { SpecificationCountArgs } from "./SpecificationCountArgs";
import { SpecificationFindManyArgs } from "./SpecificationFindManyArgs";
import { SpecificationFindUniqueArgs } from "./SpecificationFindUniqueArgs";
import { DeleteSpecificationArgs } from "./DeleteSpecificationArgs";
import { SpecificationService } from "../specification.service";
@graphql.Resolver(() => Specification)
export class SpecificationResolverBase {
  constructor(protected readonly service: SpecificationService) {}

  async _specificationsMeta(
    @graphql.Args() args: SpecificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Specification])
  async specifications(
    @graphql.Args() args: SpecificationFindManyArgs
  ): Promise<Specification[]> {
    return this.service.specifications(args);
  }

  @graphql.Query(() => Specification, { nullable: true })
  async specification(
    @graphql.Args() args: SpecificationFindUniqueArgs
  ): Promise<Specification | null> {
    const result = await this.service.specification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Specification)
  async deleteSpecification(
    @graphql.Args() args: DeleteSpecificationArgs
  ): Promise<Specification | null> {
    try {
      return await this.service.deleteSpecification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
